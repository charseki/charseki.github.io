<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Encrypt_Demo</title>
    <url>/2020/11/29/Encrypt_Demo/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误,请重新输入！" data-whm="文章不能被校验,不过您还是能看看解密后的内容！"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好,请在下方输入密码！" /><label>您好,请在下方输入密码！</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="19c06c3d70add7aa0c74b425e5af2935f9176dfb0934fb3d9d1c5ead7337e7cb">f0e260aa95ce3ceffcb2b4f9bd98f3f35189ff6848982a804d96cce2bf6aba109b6e9673bb192ee04d918b10de44b772208572ab4bd84e5baf09905fa8d8eec1229b9bd21eb165cc2371b188aec6d6e4940da0597c62a830892a92f05db74a9d1537e7db0c82eba8f1ce1e769bd062aa65a5221b524fbed9d65ded3b659c363d9a30130d01be9f5c3891bee6972c5d9614d13320b7212dc18691a8decc461a4381e776f1523ebba2aaf429e5c851a1e3962014f99294da2940c9c42cc0df5e83104a11712d78e4a431d42d0b933dc8159259545e24018dafeb2402d57e39a4797a98795b985224dcaf3599ab90222f2b12c3e70378795a422a7011e03a284695084eee849f4e217724b884e0f318f296d116842ee5189b54590870d388b867481bb30446bab709f725f1cdc287f6b4367a5b2362e859e9a0e57188fbe9110fb42c62c360b173ddcd63de733fc7cf0820c1b857113570710fd7c3492b1daf1207b2c4bc1c0e9c2f9d7482346de38d5ab4c2f4140f9bf8a046e561ef0c931f0818ee2cb9d6789ae2fd17ceebd072d72100a901943d7ceaa5422df02f3362d1124ae52a975395aca8318a23dac8681c2e08</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Encrypted</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux 2020.4 替换BurpSuite Pro 1.7.37</title>
    <url>/2020/12/16/Kali-Linux-2020-4-%E6%9B%BF%E6%8D%A2BurpSuite-Pro-1-7-37/</url>
    <content><![CDATA[<h1 id="Kali-Linux-2020-4-替换BurpSuite-Pro-1-7-37"><a href="#Kali-Linux-2020-4-替换BurpSuite-Pro-1-7-37" class="headerlink" title="Kali Linux 2020.4 替换BurpSuite Pro 1.7.37"></a>Kali Linux 2020.4 替换BurpSuite Pro 1.7.37</h1><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>新出的kail linux 2020.4自带的burpsuite是社区版的，通过此贴记录升级过程。</p>
<h3 id="BP破解"><a href="#BP破解" class="headerlink" title="BP破解"></a>BP破解</h3><p>1、先删除自带的社区版burpsuite</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/bin/burpsuite</span><br></pre></td></tr></table></figure>

<p>2、然后在/usr/bin下面新建一个burp文件夹，把两个jar包都放到这里。</p>
<p>3、运行破解补丁包 burp-loader-keygen.jar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar burp-loader-keygen.jar</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201216145424.png" alt="image-20201216145420403"></p>
<p>点击界面上的“Run”，进入程序安装界面。</p>
<p>把License复制到里面–&gt;Next–&gt;选择Manual activation–&gt;</p>
<p>Copy request到Activation Request里面，得到Activation Response–&gt;</p>
<p>点击程序里的Paste response–&gt;Next–&gt;完成安装。</p>
<p><strong>升级过程很简单，不做过多介绍。</strong></p>
<a id="more"></a>

<h3 id="修改快捷方式"><a href="#修改快捷方式" class="headerlink" title="修改快捷方式"></a>修改快捷方式</h3><p>1、确保jdk已经切换到1.8版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives  --config  java</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201216150725.png" alt="image-20201216150721971"></p>
<p>2、vim新建一个文件burpsuite，内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">java -Xbootclasspath/p:/usr/bin/burp/burp-loader-keygen.jar -jar /usr/bin/burp/burpsuite_pro_v1.7.37.jar</span><br></pre></td></tr></table></figure>

<p>3、保存退出，增加执行权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/bin/burpsuite</span><br></pre></td></tr></table></figure>

<p>4、进入/usr/share/applications，并编辑burpsuite的快捷方式</p>
<p>修改内容如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201216151148.png" alt="image-20201216151143914"></p>
<p>把原来的：Exec=sh -c “java -jar /usr/bin/burpsuite” 改为 Exec=sh -c “/usr/bin/burpsuite”</p>
<p>5、然后就可以使用桌面的快捷方式启动BurpSuite了</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201216151343.png" alt="image-20201216151340947"></p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201216151414.png" alt="image-20201216151406810"></p>
]]></content>
      <categories>
        <category>Kali Linux</category>
      </categories>
      <tags>
        <tag>BurpSuite</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux 安装JDK8</title>
    <url>/2020/12/16/Kali-Linux-%E5%AE%89%E8%A3%85JDK8/</url>
    <content><![CDATA[<h1 id="Kali-Linux-安装JDK8"><a href="#Kali-Linux-安装JDK8" class="headerlink" title="Kali Linux 安装JDK8"></a>Kali Linux 安装JDK8</h1><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>自带的jdk版本太高，有些软件不兼容，所以打算卸载，重新安装jdk1.8</p>
<h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><p>自行去Oracle官网下载JDK1.8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /usr/<span class="built_in">local</span>/java</span><br><span class="line">sudo cp jdk-8u161-linux-x64.tar.gz /usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/java</span><br><span class="line">sudo tar -zxvf jdk-8u91-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment">### JDK Environment</span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_161</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="通知系统java的位置"><a href="#通知系统java的位置" class="headerlink" title="通知系统java的位置"></a>通知系统java的位置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install <span class="string">&quot;/usr/bin/java&quot;</span> <span class="string">&quot;java&quot;</span> <span class="string">&quot;/usr/local/java/jdk1.8.0_161/bin/java&quot;</span> 1</span><br><span class="line">sudo update-alternatives --install <span class="string">&quot;/usr/bin/javac&quot;</span> <span class="string">&quot;javac&quot;</span> <span class="string">&quot;/usr/local/java/jdk1.8.0_161/bin/javac&quot;</span> 1</span><br><span class="line">sudo update-alternatives --install <span class="string">&quot;/usr/bin/javaws&quot;</span> <span class="string">&quot;javaws&quot;</span> <span class="string">&quot;/usr/local/java/jdk1.8.0_161/bin/javaws&quot;</span> 1</span><br><span class="line">sudo update-alternatives --install <span class="string">&quot;/usr/bin/javaws&quot;</span> <span class="string">&quot;javaws&quot;</span> <span class="string">&quot;/usr/local/java/jdk1.8.0_161/bin/javaws&quot;</span> 1</span><br></pre></td></tr></table></figure>

<h3 id="设置默认JDK"><a href="#设置默认JDK" class="headerlink" title="设置默认JDK"></a>设置默认JDK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --<span class="built_in">set</span> java /usr/<span class="built_in">local</span>/java/jdk1.8.0_161/bin/java</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> javac /usr/<span class="built_in">local</span>/java/jdk1.8.0_161/bin/javac</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> javaws /usr/<span class="built_in">local</span>/java/jdk1.8.0_161/bin/javaws</span><br></pre></td></tr></table></figure>

<h3 id="重载profile"><a href="#重载profile" class="headerlink" title="重载profile"></a>重载profile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="验证JDK"><a href="#验证JDK" class="headerlink" title="验证JDK"></a>验证JDK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201216110221.png" alt="image-20201216110212117"></p>
]]></content>
      <categories>
        <category>Kali Linux</category>
      </categories>
      <tags>
        <tag>JDK8</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux Firefox 代理设置</title>
    <url>/2020/12/17/Kali-Linux-%E8%AE%BE%E7%BD%AEFirefox%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Kali-Linux-Firefox-代理设置"><a href="#Kali-Linux-Firefox-代理设置" class="headerlink" title="Kali Linux Firefox 代理设置"></a>Kali Linux Firefox 代理设置</h1><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>在浏览器上设置代理地址，配合BurpSuite可以进行截包/改包/发包等操作，这里用Firefox浏览器做示例。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>通过Firefox自带的一款插件：FoxyProxy 实现。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201217122535.png" alt="image-20201217122531481"></p>
<p>安装完后，可以在菜单栏找到它。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201217122645.png" alt="image-20201217122639796"></p>
<a id="more"></a>
<h3 id="BP-代理设置"><a href="#BP-代理设置" class="headerlink" title="BP 代理设置"></a>BP 代理设置</h3><p>在BurpSuite上添加本地的8888端口为代理服务器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201217123007.png" alt="image-20201217123003906"></p>
<h3 id="FoxyProxy-设置"><a href="#FoxyProxy-设置" class="headerlink" title="FoxyProxy 设置"></a>FoxyProxy 设置</h3><p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201217123233.png" alt="image-20201217123227702"></p>
<p>开启burpsuite这个代理选项。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201217123343.png" alt="image-20201217123339643"></p>
<h3 id="BP-截包测试"><a href="#BP-截包测试" class="headerlink" title="BP 截包测试"></a>BP 截包测试</h3><p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201217123548.png" alt="image-20201217123544981"></p>
]]></content>
      <categories>
        <category>Kali Linux</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP之Mysql源码编译安装</title>
    <url>/2020/12/06/LNMP%E4%B9%8BMysql%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="004-LNMP之Mysql源码编译安装"><a href="#004-LNMP之Mysql源码编译安装" class="headerlink" title="004-LNMP之Mysql源码编译安装"></a>004-LNMP之Mysql源码编译安装</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><p>搜狐镜像源：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a> （推荐，国内源下载速度嗖嗖的）</p>
<p>这里有很多常用的镜像，Mysql的源码包也在里面。</p>
<h3 id="Mysql数据库的一些依赖包"><a href="#Mysql数据库的一些依赖包" class="headerlink" title="Mysql数据库的一些依赖包"></a>Mysql数据库的一些依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ make tar openssl openssl-devel cmake ncurses ncurses-devel</span><br></pre></td></tr></table></figure>

<h3 id="Mysql的编译安装"><a href="#Mysql的编译安装" class="headerlink" title="Mysql的编译安装"></a>Mysql的编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建mysql用户去启动数据库进程</span></span><br><span class="line">useradd -s /sbin/nologin mysql</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">tar -zxvf mysql-5.6.39.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mysql-5.6.39</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql -DMYSQL_DATADIR=/data/mysql -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS:STRING=all -DWITH_DEBUG=0 -DWITH_SSL=yes -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cp /usr/<span class="built_in">local</span>/src/mysql-5.6.39/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod a+x /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="编译参数说明"><a href="#编译参数说明" class="headerlink" title="编译参数说明"></a>编译参数说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定Mysql的安装目录</span></span><br><span class="line">CMACK_INSTALL_PREFIX</span><br><span class="line"><span class="comment"># 指定Mysql的数据目录</span></span><br><span class="line">MYSQL_DATADIR</span><br></pre></td></tr></table></figure>

<h3 id="Mysql环境变量配置"><a href="#Mysql环境变量配置" class="headerlink" title="Mysql环境变量配置"></a>Mysql环境变量配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mysql/bin/</span><br><span class="line"><span class="comment"># 将环境变量追加到 /etc/profile</span></span><br><span class="line"><span class="built_in">source</span> /ect/profile</span><br><span class="line"><span class="comment"># 查看环境变量是否生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="Mysql的启动步骤"><a href="#Mysql的启动步骤" class="headerlink" title="Mysql的启动步骤"></a>Mysql的启动步骤</h3><p>1.更新配置</p>
<p>2.数据库初始化</p>
<p>3.启动数据库</p>
<h3 id="更新Mysql配置"><a href="#更新Mysql配置" class="headerlink" title="更新Mysql配置"></a>更新Mysql配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置路径  /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">user=mysql</span><br><span class="line">skip-name-resolve</span><br><span class="line">long_query_time=2</span><br><span class="line">slow_query_log_file=/data/mysql/mysql-slow.log</span><br><span class="line">expire_logs_days=2</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">log_warnings=1</span><br><span class="line">max_allowed_packet=512M</span><br><span class="line">connect_timeout=120</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log_error=/data/mysql/mysqld.log</span><br><span class="line">pid-file=/data/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure>

<h3 id="Mysql数据库初始化"><a href="#Mysql数据库初始化" class="headerlink" title="Mysql数据库初始化"></a>Mysql数据库初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -pv /data/mysql</span><br><span class="line">chown -R mysql:mysql /usr/<span class="built_in">local</span>/mysql /data/mysql/</span><br><span class="line">yum install -y perl-Module-Install</span><br><span class="line">/usr/<span class="built_in">local</span>/mysql/scripts/mysql_install_db --basedir=/usr/<span class="built_in">local</span>/mysql --user=mysql --datadir=/data/mysql/</span><br></pre></td></tr></table></figure>

<h3 id="使用systemctl管理mysqld"><a href="#使用systemctl管理mysqld" class="headerlink" title="使用systemctl管理mysqld"></a>使用systemctl管理mysqld</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件的路径  /usr/lib/systemd/systemd/mysqld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=mysqld</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/init.d/mysqld start</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="启动Mysql服务器"><a href="#启动Mysql服务器" class="headerlink" title="启动Mysql服务器"></a>启动Mysql服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<h3 id="验证Mysql是否启动"><a href="#验证Mysql是否启动" class="headerlink" title="验证Mysql是否启动"></a>验证Mysql是否启动</h3><p>1.查看进程 ps -ef | grep mysql</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206222916.png"></p>
<p> 2.查看监听 netstat -tunlp | grep mysql</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206222946.png"></p>
<p>3.查看日志 cat /data/mysql/mysqld.log</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206223018.png"></p>
<h3 id="Mysql的安全方式"><a href="#Mysql的安全方式" class="headerlink" title="Mysql的安全方式"></a>Mysql的安全方式</h3><p>1.mysql能限制ip访问、访问需要用户名密码、mysql权限还能细分<br>2.默认让127.0.0.1访问，用户名root，不需要密码<br>3.mysql -uroot -h 127.0.0.1 -A</p>
<h3 id="Mysql添加密码"><a href="#Mysql添加密码" class="headerlink" title="Mysql添加密码"></a>Mysql添加密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给mysql数据库root用户添加密码root</span></span><br><span class="line">mysqladmin -h 127.0.0.1 -uroot password <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment"># 用root密码验证登录</span></span><br><span class="line">mysql -h 127.0.0.1 -uroot -proot -A</span><br></pre></td></tr></table></figure>

<h3 id="Mysql授权某ip登录并指定用户名"><a href="#Mysql授权某ip登录并指定用户名" class="headerlink" title="Mysql授权某ip登录并指定用户名"></a>Mysql授权某ip登录并指定用户名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加192.168.0.X段的ip允许网络访问Mysql数据库</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.0.%&#39; IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</span><br><span class="line"># 刷新mysql权限的相关表</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="网络登录Mysql"><a href="#网络登录Mysql" class="headerlink" title="网络登录Mysql"></a>网络登录Mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mysql数据库服务器地址:192.168.4.99</span></span><br><span class="line"><span class="comment"># 我用另外一台linux机器:192.168.4.98 网络登录Mysql数据库访问</span></span><br><span class="line">mysql -h 192.168.4.99 -uroot -proot -A</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206223324.png"></p>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP之Nginx服务器搭建</title>
    <url>/2020/12/06/LNMP%E4%B9%8BNginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="002-LNMP之Nginx服务器搭建"><a href="#002-LNMP之Nginx服务器搭建" class="headerlink" title="002-LNMP之Nginx服务器搭建"></a>002-LNMP之Nginx服务器搭建</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p><strong>常见Web服务器：</strong></p>
<p>1、Apache</p>
<p>2、Nginx</p>
<p>以上是常见的两种web服务器，这里我选择Nginx，因为安装和配置都比较简洁，功能也强大，满足日常的反向代理，负载均衡等功能。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Nginx服务器的编译安装"><a href="#Nginx服务器的编译安装" class="headerlink" title="Nginx服务器的编译安装"></a><strong>Nginx服务器的编译安装</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先是安装Nginx所需要的一些依赖包</span></span><br><span class="line">yum install -y wget gcc gcc-c++ make pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206215646.png"></p>
<p>这里不得不提一句：yum大法好呀，自己会去找依赖所需要的依赖，出现Complete就是完成了。</p>
<p>然后就是去Nginx官网下载源码包，进行编译安装的操作。</p>
<p>贴个Nginx下载的传送门：<a href="http://nginx.org/download/nginx-1.18.0.tar.gz">点我下载Nginx</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载路径我选择到 /usr/local/src</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.18.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="手动启动和关闭Nginx"><a href="#手动启动和关闭Nginx" class="headerlink" title="手动启动和关闭Nginx"></a><strong>手动启动和关闭Nginx</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"><span class="comment"># 检查Nginx配置</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="comment"># 启动Nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭Nginx</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>

<p>设置完系统环境变量后，记得source立即生效一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206220007.png"></p>
<h3 id="验证Nginx是否安装成功"><a href="#验证Nginx是否安装成功" class="headerlink" title="验证Nginx是否安装成功"></a><strong>验证Nginx是否安装成功</strong></h3><p>1.查看进程</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206220051.png"></p>
<p> 2.查看监听端口</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206220118.png"></p>
<p> 3.nginx日志访问</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206220203.png"></p>
<p>4.浏览器访问</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206220247.png"></p>
<h3 id="使用systemctl管理Nginx"><a href="#使用systemctl管理Nginx" class="headerlink" title="使用systemctl管理Nginx"></a><strong>使用systemctl管理Nginx</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置路径</span></span><br><span class="line">/usr/lib/systemd/system/nginx.service</span><br><span class="line"><span class="comment"># 配置内容</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p> 然后就可以用systemctl管理nginx服务了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动nginx服务</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"><span class="comment"># 查看nginx服务状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="comment"># 重启nginx服务</span></span><br><span class="line">sytemctl restart nginx</span><br><span class="line"><span class="comment"># 停止nginx服务</span></span><br><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP之PHP环境搭建</title>
    <url>/2020/12/06/LNMP%E4%B9%8BPHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="003-LNMP之PHP环境搭建"><a href="#003-LNMP之PHP环境搭建" class="headerlink" title="003-LNMP之PHP环境搭建"></a>003-LNMP之PHP环境搭建</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><p>php官网：<a href="https://www.php.net/">https://www.php.net/</a></p>
<p>搜狐镜像源：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a> （推荐，国内源下载速度嗖嗖的）</p>
<h3 id="php编译安装前解决依赖包"><a href="#php编译安装前解决依赖包" class="headerlink" title="php编译安装前解决依赖包"></a>php编译安装前解决依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install gcc gcc-c++ make pcre pcre-devel zlib zlib-devel openssl openssl-devel libxml2 libxml2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel openldap openldap-devel libmcrypt libmcrypt-devel sqlite sqlite-devel oniguruma-devel oniguruma</span><br></pre></td></tr></table></figure>

<h3 id="源码编译安装php"><a href="#源码编译安装php" class="headerlink" title="源码编译安装php"></a>源码编译安装php</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --enable-ctype --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-freetype-dir --with-jpeg-dir --with-png-dir --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-mbstring --with-mcrypt --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-ldap-sasl --with-xmlrpc --enable-zip --enable-soap --with-gettext --enable-fpm</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 在/usr/local/php/etc目录下，默认是没有php.ini这个配置文件的，需要拷贝一个过去</span></span><br><span class="line"><span class="comment"># 拷贝的文件路径/usr/local/src/php-7.4.7</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/src/php-7.4.7/php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br></pre></td></tr></table></figure>

<a id="more"></a>he
<h3 id="php编译安装说明"><a href="#php编译安装说明" class="headerlink" title="php编译安装说明"></a>php编译安装说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--prefix 指定php的安装目录</span><br><span class="line">--with-config-file-path 指定php的配置文件位置</span><br><span class="line">--with-mysql 让php可以操作mysql</span><br><span class="line">--enable-fpm 主要是nginx要来调用php语言使得php-fpm</span><br></pre></td></tr></table></figure>

<h3 id="启动php-fpm"><a href="#启动php-fpm" class="headerlink" title="启动php-fpm"></a>启动php-fpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/php/sbin/:/usr/<span class="built_in">local</span>/php/bin/</span><br><span class="line"><span class="comment"># 检查配置文件</span></span><br><span class="line">php-fpm -t</span><br><span class="line"><span class="comment"># 使用默认配置文件</span></span><br><span class="line">mv /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf.default /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span><br><span class="line"><span class="comment"># 查看php-fpm的listen配置</span></span><br></pre></td></tr></table></figure>

<h3 id="验证php-fpm的启动"><a href="#验证php-fpm的启动" class="headerlink" title="验证php-fpm的启动"></a>验证php-fpm的启动</h3><p>1.进程</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206221352.png"></p>
<p>2.端口</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206221427.png"></p>
<p>3.日志</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206221506.png"></p>
<h3 id="使用systemctl管理php-fpm"><a href="#使用systemctl管理php-fpm" class="headerlink" title="使用systemctl管理php-fpm"></a>使用systemctl管理php-fpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件的路径</span></span><br><span class="line">vi /usr/lib/systemd/system/php-fpm.service</span><br><span class="line"><span class="comment"># 配置内容：</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=php-fpm</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/php/sbin/php-fpm</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="nginx-php-fpm结合的配置"><a href="#nginx-php-fpm结合的配置" class="headerlink" title="nginx+php-fpm结合的配置"></a>nginx+php-fpm结合的配置</h3><p>测试页代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>nginx默认配置无法处理php程序，只会下载，需要改配置文件nginx.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">            <span class="attribute">root</span>           html;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">            <span class="comment"># 修改默认的/scripts为$document_root,去root-&gt;html下面找页面</span></span><br><span class="line">            <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="页面test-php访问测试"><a href="#页面test-php访问测试" class="headerlink" title="页面test.php访问测试"></a>页面test.php访问测试</h3><p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206221756.png"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><h3 id="运行systemctl-start-php-fpm报错"><a href="#运行systemctl-start-php-fpm报错" class="headerlink" title="运行systemctl start php-fpm报错"></a>运行systemctl start php-fpm报错</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[30-Jun-2020 18:34:23] WARNING: Nothing matches the include pattern <span class="string">&#x27;/usr/local/php/etc/php-fpm.d/*.conf&#x27;</span> from /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf at line 125.</span><br><span class="line">[30-Jun-2020 18:34:23] ERROR: No pool defined. at least one pool section must be specified <span class="keyword">in</span> config file</span><br><span class="line">[30-Jun-2020 18:34:23] ERROR: failed to post process the configuration</span><br><span class="line">[30-Jun-2020 18:34:23] ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/etc/php-fpm.d/</span><br><span class="line">cp www.conf.default www.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/php/sbin/php-fpm -t</span><br><span class="line"></span><br><span class="line">[30-Jun-2020 18:35:29] NOTICE: configuration file /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@localhost php-fpm.d]systemctl start php-fpm</span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP环境连接Mysql测试</title>
    <url>/2020/12/06/LNMP%E7%8E%AF%E5%A2%83%E8%BF%9E%E6%8E%A5Mysql%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="005-LNMP环境连接Mysql测试"><a href="#005-LNMP环境连接Mysql测试" class="headerlink" title="005-LNMP环境连接Mysql测试"></a>005-LNMP环境连接Mysql测试</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a><strong>背景介绍</strong></h2><p>用户通过浏览器访问Nginx -&gt; html下的mysql.php文件，去连接Mysql数据库的一个测试</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><h3 id="LNMP服务检查"><a href="#LNMP服务检查" class="headerlink" title="LNMP服务检查"></a>LNMP服务检查</h3><p>检查确保Linux、nginx、php-fpm、mysql的服务都是正常启动的</p>
<h3 id="Mysql测试代码编写"><a href="#Mysql测试代码编写" class="headerlink" title="Mysql测试代码编写"></a>Mysql测试代码编写</h3><p>这里要说明一下，PHP5和PHP7连接Mysql的区别还是挺大的，不要翻车了。</p>
<p>PHP5使用mysql_connect函数来进行Mysql数据库的连接操作。</p>
<p>PHP7已经摒弃了这个函数，改成了mysqli_connect()函数，面向对象的写法：</p>
<p>变量名 = new mysqli(主机地址，用户名，密码，数据库名)；</p>
<p>下面是测试代码mysql.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;192.168.0.99&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> mysqli(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line">   phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="Mysql连接结果验证"><a href="#Mysql连接结果验证" class="headerlink" title="Mysql连接结果验证"></a>Mysql连接结果验证</h3><p>1.连接成功的界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206225701.png"></p>
<p>2.连接失败的界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206225734.png"></p>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开机模式和网络设置</title>
    <url>/2020/12/06/Linux%E5%BC%80%E6%9C%BA%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="001-Linux开机模式和网络设置"><a href="#001-Linux开机模式和网络设置" class="headerlink" title="001-Linux开机模式和网络设置"></a>001-Linux开机模式和网络设置</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>准备3台服务器（虚拟机环境），一台打算当做Web服务器（Nginx），另外2台备用。考虑到对物理机性能的占用，故采用命令行启动的模式。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="修改开机模式为命令模式"><a href="#修改开机模式为命令模式" class="headerlink" title="修改开机模式为命令模式"></a><strong>修改开机模式为命令模式</strong></h3><p>3台服务器分别取名为server001、server002、server003，都安装Centos7后，修改配置文件，开机到命令行模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/inittab  <span class="comment">#修改配置文件的路径 </span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206214018.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi-user.target  <span class="comment">#指的就是命令模式</span></span><br><span class="line">graphical.target  <span class="comment">#指的就是GUI模式</span></span><br></pre></td></tr></table></figure>

<p>修改完之后，reboot一下就能看到效果了。</p>
<a id="more"></a>
<h3 id="在命令模式下设置网络配置"><a href="#在命令模式下设置网络配置" class="headerlink" title="在命令模式下设置网络配置"></a><strong>在命令模式下设置网络配置</strong></h3><p>首先用ifconfig查看一下自己网卡的信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206214206.png"></p>
<p>可以看到我的网卡名称为：eno16777736，另外一个是回环地址的网卡，不用去管。</p>
<p>然后去修改这个网卡配置的信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206214249.png"></p>
<p>修改内容如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206214322.png"></p>
<p> 然后route-n查看一下路由信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206214500.png"></p>
<p> 同样方法设置server001和server003,然后检查一下3台服务器的网络连接就行了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206214538.png"></p>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>TestLink部署过程</title>
    <url>/2021/01/23/Testlink%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Testlink安装配置"><a href="#Testlink安装配置" class="headerlink" title="Testlink安装配置"></a>Testlink安装配置</h1><hr>
<h3 id="软件版本介绍"><a href="#软件版本介绍" class="headerlink" title="软件版本介绍"></a>软件版本介绍</h3><p>xmapp版本：xampp-linux-x64-7.2.0-0-installer.run</p>
<p>testlink版本：testlink-1.9.18.tar.gz</p>
<h3 id="Testlink安装"><a href="#Testlink安装" class="headerlink" title="Testlink安装"></a>Testlink安装</h3><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115163744.png" alt="image-20210115163735405" style="zoom:67%;" align="center"/>

<a id="more"></a>

<hr>
<table>
<thead>
<tr>
<th>Maximum Session Idle Time before Timeout</th>
<th align="left">24 minutes and 0 seconds - (Short. Consider to extend.)</th>
</tr>
</thead>
<tbody><tr>
<td>Checking max. execution time (Parameter max_execution_time)</td>
<td align="left">30 seconds - We suggest 120 seconds in order to manage hundred of test cases (edit php.ini)</td>
</tr>
</tbody></table>
<ul>
<li><p>打开php.ini文件修改以下两个值</p>
</li>
<li><p>vim /opt/lampp/etc/php.ini</p>
</li>
<li><p>session.gc_maxlifetime = 2880</p>
</li>
<li><p>max_execution_time = 180</p>
</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>Checking Postgres Database</th>
<th>Failed! Postgres Database cannot be used.</th>
</tr>
</thead>
<tbody><tr>
<td>Checking MySQL Database</td>
<td>OK</td>
</tr>
<tr>
<td>Checking MSSQL Database</td>
<td>Failed! MSSQL Database cannot be used.</td>
</tr>
</tbody></table>
<ul>
<li>Web and PHP这一栏</li>
<li>MySQL显示OK就可以，其他可以错误可以忽略</li>
<li>Read/write permissions这一栏可能会提醒<ul>
<li>Checking if /var/testlink/logs/ directory exists [S] Failed!</li>
<li>Checking if /var/testlink/upload_area/ directory exists [S] Failed!</li>
</ul>
</li>
</ul>
<hr>
<p>testlink需要配置的地方不多，此处简单介绍几个配置点。</p>
<p>打开config_inc.php,修改配置参数.如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）将<span class="variable">$tlCfg</span>-&gt;config_check_warning_mode = FILE<span class="string">&#x27;;改成   $tlCfg-&gt;config_check_warning_mode=&#x27;</span>SILENT<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2）将$tlCfg-&gt;log_path= &#x27;</span>/<span class="keyword">var</span>/testlink/logs/<span class="string">&#x27;改成  $tlCfg-&gt;log_path=&#x27;</span>/opt/lampp/htdocs/testlink/logs/<span class="string">&#x27;  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3）将$g_repositoryPath = &#x27;</span>/<span class="keyword">var</span>/testlink/upload_area/<span class="string">&#x27;;改成  $g_repositoryPath=&#x27;</span>/opt/lampp/htdocs/testlink/upload_area/<span class="string">&#x27;; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4）将$tlCfg-&gt;default_language = &#x27;</span>en_G<span class="string">B&#x27;;改成  $tlCfg-&gt;default_language= &#x27;</span> zh_CN<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5)打开config.inc.php，查找$tlCfg-&gt;import_file_max_size_bytes，将后面的数据‘409600’改为期望的数据值。（建议修改为2M，即2097152） /*更改导入测试套件和测试用例文件大小*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6)打开config.inc.php，找到$tlCfg-&gt;user_self_signup，将其后true改为false，在登录界面便取消了NewUser链接。 /*禁止新用户注册*/</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>接下去是数据库这边的配置过程</strong></p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115170447.png" alt="image-20210115170443157" style="zoom:67%;" />

<p>安装完xampp默认Mysql用户名为root，密码为空，所以需要修改后再来这个页面填写数据库的资料。</p>
<p>登录到后台数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/lampp/bin/mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>提示Enter password：直接回车登录即可。</p>
<p>进入数据后，重置数据库密码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;	//查看数据库</span><br><span class="line"><span class="keyword">use</span> mysql;	//选择mysql数据库</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">&#x27;xxxxxx&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;		//重置root密码</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;		//重载配置</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115170824.png" alt="image-20210115170820438" style="zoom:100%;" align="center"/>

<p>既然mysql的root用户密码已经修改，那么phpmyadmin中的对应密码配置也要修改，找到配置文件：</p>
<p>/opt/lampp/phpmyadmin/config.inc.php</p>
<p>找到如下代码修改为：</p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115171719.png" alt="image-20210115171708213" align="center" />

<hr>
<p><strong>到最后一步突然报错了。。。</strong></p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115172833.png" alt="image-20210115172724704" style="zoom:67%;" align="center" />

<p>解决办法：在testlink目录下创建config_db.inc.php文件，并拷贝上面提示的信息到php里就可以啦</p>
<p>vi config_db.inc.php </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Automatically Generated by TestLink Installer - Fri, 15 Jan 21 10:22:28 +0100</span></span><br><span class="line">define(<span class="string">&#x27;DB_TYPE&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;testlink&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_PASS&#x27;</span>, <span class="string">&#x27;waftest&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;testlink&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;DB_TABLE_PREFIX&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>保持该文件的权限/属组/属主跟其他配置文件一致即可。</p>
<hr>
<p><strong>成功登录的页面如下：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210123180657.png" alt="image-20210123180653924"></p>
<h3 id="安装问题解决"><a href="#安装问题解决" class="headerlink" title="安装问题解决"></a>安装问题解决</h3><h5 id="（1）phpmyadmin拒绝连接的问题"><a href="#（1）phpmyadmin拒绝连接的问题" class="headerlink" title="（1）phpmyadmin拒绝连接的问题"></a>（1）phpmyadmin拒绝连接的问题</h5><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115221502.png" alt="image-20210115221443661" style="zoom:80%;" align="center" />

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# vim /opt/lampp/etc/extra/httpd-xampp.conf</span><br></pre></td></tr></table></figure>

<p>找到如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/opt/lampp/phpmyadmin&quot;&gt;</span><br><span class="line">    AllowOverride AuthConfig Limit</span><br><span class="line">    Require local</span><br><span class="line">    ErrorDocument 403 /error/XAMPP_FORBIDDEN.html.var</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>将它改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/opt/lampp/phpmyadmin&quot;&gt;</span><br><span class="line">    AllowOverride AuthConfig Limit</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line">    ErrorDocument 403 /error/XAMPP_FORBIDDEN.html.var</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="（2）mysql拒绝连接的问题"><a href="#（2）mysql拒绝连接的问题" class="headerlink" title="（2）mysql拒绝连接的问题"></a>（2）mysql拒绝连接的问题</h5><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210115222034.png" alt="image-20210115222031604" style="zoom:67%;" align="center" />

<p><strong>先修改了root访问权限</strong></p>
<p>grant all on <em>.</em> to root@’%’ identified by ‘填你的密码’ with grant option;</p>
<p>刷新权限</p>
<p>flush privileges;</p>
<p>然后重启Mysql</p>
<p>还是无法用navicat连接</p>
<p><strong>然后以为是防火墙问题</strong>，结果为3306端口开放了防火墙后，仍然无法连接</p>
<p>然后就是修改etc/my.cnf，以为没有设置bind-address = 0.0.0.0</p>
<p>结果发现还是无法连接</p>
<p>最后查看mysql进程，确实是已经启动成功了的，难道是mysql 没有监听到3306端口？</p>
<p><strong>查看mysql进程</strong></p>
<p>ps -ef |grep mysql </p>
<p>然后又查看了一下<strong>3306端口监听情况</strong></p>
<p>netstat -antp| grep 3306</p>
<p>果然啥都没有</p>
<p>知道这个问题了解决起来就方便了</p>
<p>百度了一下，找到了答案，说的是mysql配置文件my.conf中，使用了 skip-networking，可以看到这个选项的的作用是不监听端口，同主机的用户通过 sockets 进行链接。外部主机由于没有监听端口，将无法连接。</p>
<p>所以，注释掉skip-networking</p>
<p>然后用Navicat连接，总算连接上了</p>
]]></content>
      <categories>
        <category>Test Utils</category>
      </categories>
      <tags>
        <tag>TestLink</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix4.0版本编译安装</title>
    <url>/2020/12/06/Zabbix%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="006-Zabbix4-0版本编译安装"><a href="#006-Zabbix4-0版本编译安装" class="headerlink" title="006-Zabbix4.0版本编译安装"></a>006-Zabbix4.0版本编译安装</h1><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><h3 id="Zabbix源码编译安装"><a href="#Zabbix源码编译安装" class="headerlink" title="Zabbix源码编译安装"></a>Zabbix源码编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zabbix的一些依赖包安装</span></span><br><span class="line">yum install -y libevent-devel wget tar gcc gcc-c++ make net-snmp-devel libxml2-devel libcurl-devel</span><br><span class="line"><span class="comment"># 创建启动进程的用户zabbix</span></span><br><span class="line">useradd -s /sbin/nologin zabbix</span><br><span class="line"><span class="comment"># zaibbx的tar下载</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">wget https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX Latest Stable/4.0.3/zabbix-4.0.3.tar.gz</span><br><span class="line"><span class="comment"># 解压zabbix的tar包</span></span><br><span class="line">tar -zxvf zabbix-4.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zabbix-4.0.3</span><br><span class="line"><span class="comment"># zabbix编译安装</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zabbix --enable-server --enable-agent --with-mysql=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config --with-net-snmp --with-libcurl --with-libxml2</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h3 id="Zabbix编译参数说明"><a href="#Zabbix编译参数说明" class="headerlink" title="Zabbix编译参数说明"></a>Zabbix编译参数说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--prefix 指定安装的目录</span><br><span class="line">--enable-server 安装zabbix-server</span><br><span class="line">--enable-agent 安装zabbix-agent</span><br><span class="line">--with-mysql 用mysql来进行存储</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="Zabbix-server的安装验证"><a href="#Zabbix-server的安装验证" class="headerlink" title="Zabbix server的安装验证"></a>Zabbix server的安装验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境变量设置</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/zabbix/sbin/:/usr/<span class="built_in">local</span>/zabbix/bin/</span><br><span class="line"><span class="comment"># 查看版本:</span></span><br><span class="line">zabbix_server --version</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231230.png"></p>
<h3 id="Zabbix-server的启动"><a href="#Zabbix-server的启动" class="headerlink" title="Zabbix server的启动"></a>Zabbix server的启动</h3><p>1.需要到mysql里做数据库初始化<br>2.配置zabbix server<br>3.启动zabbix server</p>
<h3 id="Mysql数据库初始化"><a href="#Mysql数据库初始化" class="headerlink" title="Mysql数据库初始化"></a>Mysql数据库初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录到Mysql数据库</span></span><br><span class="line">mysql -h 127.0.0.1 -uroot -proot -A</span><br><span class="line"><span class="comment"># 创建数据库zabbix</span></span><br><span class="line">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;127.0.0.1&#x27;</span> identified by <span class="string">&#x27;19941127&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">set</span> names utf8;</span><br><span class="line"><span class="comment"># 在数据库zabbix中执行建表的sql脚本</span></span><br><span class="line">use zabbix;</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/src/zabbix-4.0.3/database/mysql/schema.sql</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/src/zabbix-4.0.3/database/mysql/data.sql</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/src/zabbix-4.0.3/database/mysql/images.sql</span><br></pre></td></tr></table></figure>

<h3 id="Zabbix-server的配置"><a href="#Zabbix-server的配置" class="headerlink" title="Zabbix server的配置"></a>Zabbix server的配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件的路径:/usr/local/zabbix/etc/zabbix_server.conf</span></span><br><span class="line">LogFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_server.log</span><br><span class="line">DBHost=127.0.0.1</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=19941127</span><br><span class="line">DBPort=3306</span><br><span class="line">Timeout=30</span><br><span class="line">AlertScriptsPath=/usr/<span class="built_in">local</span>/zabbix/alertscripts</span><br><span class="line">ExternalScripts=/usr/<span class="built_in">local</span>/zabbix/externalscripts</span><br><span class="line">LogSlowQueries=3000</span><br></pre></td></tr></table></figure>

<h3 id="启动Zabbix-server"><a href="#启动Zabbix-server" class="headerlink" title="启动Zabbix server"></a>启动Zabbix server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改所属权限</span></span><br><span class="line">chown zabbix:zabbix -R /usr/<span class="built_in">local</span>/zabbix/</span><br><span class="line"><span class="comment"># 启动zabbix server</span></span><br><span class="line">zabbix_server</span><br></pre></td></tr></table></figure>

<h3 id="验证zabbix-server的启动"><a href="#验证zabbix-server的启动" class="headerlink" title="验证zabbix server的启动"></a>验证zabbix server的启动</h3><p>1.进程</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231420.png"></p>
<p>2.端口</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231446.png"></p>
<p>3.日志</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231512.png"></p>
<h3 id="Zabbix-Web的安装"><a href="#Zabbix-Web的安装" class="headerlink" title="Zabbix Web的安装"></a>Zabbix Web的安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在nginx的html下建立zabbix的web文件夹</span></span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/nginx/html/zabbix</span><br><span class="line"><span class="comment"># 从zabbix目录拷贝web页面到nginx下</span></span><br><span class="line">cp -a /usr/<span class="built_in">local</span>/src/zabbix-4.0.3/frontends/php/* /usr/<span class="built_in">local</span>/nginx/html/zabbix/</span><br></pre></td></tr></table></figure>

<h3 id="Zabbix-Web初始化"><a href="#Zabbix-Web初始化" class="headerlink" title="Zabbix Web初始化"></a>Zabbix Web初始化</h3><p>访问：<a href="http://192.168.0.98/zabbix/">http://192.168.0.98/zabbix/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231639.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件的路径:vi /usr/local/php/etc/php.ini</span></span><br><span class="line">post_max_size = 32M</span><br><span class="line">max_execution_time = 350</span><br><span class="line">max_input_time = 350</span><br><span class="line">date.timezone = Asia/Shanghai</span><br><span class="line">always_populate_raw_post_data = -1</span><br></pre></td></tr></table></figure>

<p>修改php.ini配置文件后，重启php-fpm.service</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231727.png"></p>
<h3 id="登录Zabbix设置"><a href="#登录Zabbix设置" class="headerlink" title="登录Zabbix设置"></a>登录Zabbix设置</h3><p>1.默认用户名和密码：Admin zabbix<br>2.禁用Zabbix server主机的监控</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231816.png"></p>
<p>3.禁用guest用户</p>
<p>说明：zabbix底层是通过禁用用户组来实现禁用用户的</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231851.png"></p>
<p>4.更改Admin的密码，改成自己想要的密码</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206231916.png"></p>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix4.0网页汉化</title>
    <url>/2020/12/06/Zabbix%E7%BD%91%E9%A1%B5%E6%B1%89%E5%8C%96/</url>
    <content><![CDATA[<h1 id="007-Zabbix网页汉化实战"><a href="#007-Zabbix网页汉化实战" class="headerlink" title="007-Zabbix网页汉化实战"></a>007-Zabbix网页汉化实战</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a><strong>背景介绍</strong></h2><p>Zabbix网页在设置成中文后，监测-&gt;图形里的监控图形会有乱码的产生。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206232540.png"></p>
<p> 修改文中文后，出现乱码的情况。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206232609.png"></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h2><p>解决zabbix部分乱码的情况。</p>
<h3 id="下载微软雅黑字体"><a href="#下载微软雅黑字体" class="headerlink" title="下载微软雅黑字体"></a>下载微软雅黑字体</h3><p>网盘链接: <a href="https://pan.baidu.com/s/1C40EzFfgOFWYCcepTUMeMQ">https://pan.baidu.com/s/1C40EzFfgOFWYCcepTUMeMQ</a>  密码: 0951</p>
<a id="more"></a>
<h3 id="字体的存放目录"><a href="#字体的存放目录" class="headerlink" title="字体的存放目录"></a>字体的存放目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/html/zabbix/fonts</span><br></pre></td></tr></table></figure>

<h3 id="上传微软雅黑字体"><a href="#上传微软雅黑字体" class="headerlink" title="上传微软雅黑字体"></a>上传微软雅黑字体</h3><h3 id="字体配置修改"><a href="#字体配置修改" class="headerlink" title="字体配置修改"></a>字体配置修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/nginx/html/zabbix/include/defines.inc.php</span><br></pre></td></tr></table></figure>

<p>默认是DejaVuSans字体，改成msyh微软雅黑字体</p>
<h3 id="验证乱码问题是否解决"><a href="#验证乱码问题是否解决" class="headerlink" title="验证乱码问题是否解决"></a>验证乱码问题是否解决</h3><p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20201206232958.png"></p>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>TestLink功能概述</title>
    <url>/2021/01/24/TestLink%E5%8A%9F%E8%83%BD%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="TestLink测试用例平台功能概述"><a href="#TestLink测试用例平台功能概述" class="headerlink" title="TestLink测试用例平台功能概述"></a>TestLink测试用例平台功能概述</h1><h3 id="TestLink概述"><a href="#TestLink概述" class="headerlink" title="TestLink概述"></a>TestLink概述</h3><hr>
<h5 id="1、测试管理工具"><a href="#1、测试管理工具" class="headerlink" title="1、测试管理工具"></a><strong>1、测试管理工具</strong></h5><p>是指用工具对软件的整个测试输入，执行过程和测试结果进行管理的过程。可以提高回归测试的效率、大幅提升测试时间、测试质量、用例复用、需求覆盖等。</p>
<h5 id="2、TestLink是啥"><a href="#2、TestLink是啥" class="headerlink" title="2、TestLink是啥"></a><strong>2、TestLink是啥</strong></h5><p>用于进行测试过程中的管理，通过使用TestLink提供的功能，可以将测试过程从测试需求、测试设计到测试执行完整地管理起来，同时，它还提供多种测试结果的统计和分析，使我们能够简单地开始测试工作和分析测试结果。而且，TestLink可以关联多种bug跟踪系统，如Bugzilla、mantis、jira和Redmine等。</p>
<p>（1）<strong>管理部分</strong>：产品管理、用户管理、测试需求管理和测试用例管理；</p>
<p>（2）<strong>计划执行部分</strong>：测试计划并执行测试计划，最后显示相关的测试结果分析和测试报告；</p>
<h5 id="3、主要功能"><a href="#3、主要功能" class="headerlink" title="3、主要功能"></a><strong>3、主要功能</strong></h5><ul>
<li>测试需求管理（比如一个需求，需要7个用例来覆盖，可以统计覆盖率）</li>
<li>测试用例管理</li>
<li>测试用例对测试需求的覆盖管理</li>
<li>测试计划的制定</li>
<li>测试用例的执行</li>
<li>大量测试数据的度量和统计功能</li>
</ul>
<a id="more"></a>
<h5 id="4、测试管理流程"><a href="#4、测试管理流程" class="headerlink" title="4、测试管理流程"></a><strong>4、测试管理流程</strong></h5><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118155422.png" alt="1111副本" style="zoom:60%;" align="center"/>





<h3 id="测试项目管理"><a href="#测试项目管理" class="headerlink" title="测试项目管理"></a>测试项目管理</h3><hr>
<p>TestLink可以<strong>对多个项目进行管理</strong>，而且各个测试项目之间是独立的，不能分享数据，但只有admin级的用户可以设置项目。admin进行项目设置后，测试人员就可以进行测试需求、测试用例、测试计划等相关管理工作了。</p>
<p><em>该功能由admin维护，这里不做过多介绍。</em></p>
<h3 id="创建用户管理"><a href="#创建用户管理" class="headerlink" title="创建用户管理"></a>创建用户管理</h3><hr>
<h5 id="1、TestLink用户"><a href="#1、TestLink用户" class="headerlink" title="1、TestLink用户"></a><strong>1、TestLink用户</strong></h5><p>（1）用户自助注册功能已禁用，创建用户联系admin；</p>
<p>（2）每个用户维护自己的私有信息。在用户信息中，<u>必须维护Email地址，方便后续忘记密码，自助找回；</u></p>
<h5 id="2、用户角色"><a href="#2、用户角色" class="headerlink" title="2、用户角色"></a><strong>2、用户角色</strong></h5><p>默认系统自带6种角色，后期根据需要自行分配角色权利及名称。</p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118164522.png" alt="image-20210118164518612" style="zoom: 40%;" align="center" />

<h5 id="3、语言设置"><a href="#3、语言设置" class="headerlink" title="3、语言设置"></a><strong>3、语言设置</strong></h5><p>（1）支持不同地域用户对不同语言的需求，可以根据自行喜好进行设置。</p>
<h3 id="测试需求管理"><a href="#测试需求管理" class="headerlink" title="测试需求管理"></a>测试需求管理</h3><hr>
<h5 id="1、测试需求概述"><a href="#1、测试需求概述" class="headerlink" title="1、测试需求概述"></a><strong>1、测试需求概述</strong></h5><p>对产品需求规则说明书进行<strong>分解</strong>和<strong>整理</strong> ，将其拆分为<strong>多个需求</strong>，<u>一个产品可以包含多个需求，一个需求可以包含多个测试需求。</u></p>
<p><em>创建测试需求规则 –&gt; 创建测试需求</em></p>
<h5 id="2、创建测试需求规格"><a href="#2、创建测试需求规格" class="headerlink" title="2、创建测试需求规格"></a><strong>2、创建测试需求规格</strong></h5><p>单击主页上面的<strong>”产品需求“-”产品需求规格“</strong>菜单，新建一个产品需求规格。对产品需求规格的描述比较简单，内容包含标题、范围和类型。</p>
<p><strong>文档ID：</strong>文档编号；</p>
<p><strong>标题：</strong>需求规格的标题；</p>
<p><strong>范围：</strong>该需求包括的范围；</p>
<p><strong>类型：</strong>包括条款、用户需求规格和系统需求规格三种类型；</p>
<h5 id="3、测试需求编写要素"><a href="#3、测试需求编写要素" class="headerlink" title="3、测试需求编写要素"></a>3、测试需求编写要素</h5><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210121235100.png" alt="image-20210118185627935" style="zoom:67%;" align="center"/>

<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118220048.png" alt="image-20210118220030367" style="zoom:99%;" align="center"/>



<h3 id="测试计划管理"><a href="#测试计划管理" class="headerlink" title="测试计划管理"></a>测试计划管理</h3><hr>
<h5 id="1、测试计划概述"><a href="#1、测试计划概述" class="headerlink" title="1、测试计划概述"></a>1、测试计划概述</h5><p><strong>测试计划</strong>是测试软件系统一个系统性的方法。你可以根据特定的产品周期和问题跟踪结果组织你的测试活动。</p>
<p><strong>管理测试计划</strong>涉及到：创建、编辑和删除测试计划，添加、编辑、删除和更新测试计划所包含的测试用例，创建构建以及指派用户在项目中的权限。</p>
<p>在TestLink系统中，一个完整的测试计划包括：<strong>创建测试计划</strong> -&gt; <strong>版本管理</strong> -&gt; <strong>里程碑管理</strong></p>
<h5 id="2、创建测试计划"><a href="#2、创建测试计划" class="headerlink" title="2、创建测试计划"></a>2、创建测试计划</h5><p>（1）测试计划的内容包括：<strong>计划名称</strong>，<strong>计划描述</strong>，以及<strong>是否从已有的测试计划创建</strong>。</p>
<p>（2）如果选择从已有的测试计划中创建，则新创建的测试计划包含选择的已有测试计划的所有相关联的信息，比如已有测试计划分配的测试用例。</p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118222401.png" alt="image-20210118222356826" style="zoom:99%;" align="center"/>

<h5 id="3、测试计划创建说明"><a href="#3、测试计划创建说明" class="headerlink" title="3、测试计划创建说明"></a>3、测试计划创建说明</h5><p>（1）测试计划应该包括明确定义了<strong>时间范围</strong>和<strong>内容的任务</strong>。可以<strong>通过产品需求变更来创建新的版本</strong>。</p>
<p>（2）建议使用描述字段来关联文档，需要测试的功能特性，风险等到测试计划，可以从已建立的测试来创建一个新的测试计划。</p>
<p>（3）复制的内容包括：<strong>版本信息</strong>、<strong>测试用例</strong>、<strong>优先级</strong>、<strong>里程碑</strong>和<strong>用户权限</strong>。测试计划可以被禁用（例如：正在编辑和修改测试结果时不允许修改测试计划。）禁用的测试计划仅可以通过”报告“来查看。</p>
<p>（4）创建完测试计划之后，会发现测试项目的主页多了”<strong>测试执行</strong>“和”<strong>测试用例集</strong>“的内容。同时在测试计划管理下多出了”<strong>版本管理</strong>“和”<strong>编辑/删除里程碑</strong>“选项。</p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210121213847.png" alt="image-20210118223713201" style="zoom:99%;" align="center"/>

<h6 id="a-测试计划管理"><a href="#a-测试计划管理" class="headerlink" title="a.测试计划管理"></a>a.测试计划管理</h6><p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118230345.png" alt="image-20210118225850366"></p>
<h6 id="b-版本管理"><a href="#b-版本管理" class="headerlink" title="b.版本管理"></a>b.版本管理</h6><p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118231557.png" alt="image-20210118231555273"></p>
<h6 id="c-编辑-删除里程碑"><a href="#c-编辑-删除里程碑" class="headerlink" title="c.编辑/删除里程碑"></a>c.编辑/删除里程碑</h6><p>默认只有admin可以设置/查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210118231615.png" alt="image-20210118231613233"></p>
<h5 id="4、指派测试计划角色"><a href="#4、指派测试计划角色" class="headerlink" title="4、指派测试计划角色"></a>4、指派测试计划角色</h5><p>（1）点击主页，”<strong>用户管理</strong>“模块下的”<strong>指派测试计划角色</strong>“菜单，为测试计划指派用户。</p>
<p>（2）在指派测试计划角色页面，可以选择测试计划，选择好需要指派权限的测试角色后，点击<strong>更改</strong>按钮，就可以<strong>更改测试计划</strong>。</p>
<p>（3）选择好测试计划后，可以将该测试计划<strong>以不同的角色分配给不同的用户，</strong>通过角色列表，可以选择用户对该测试计划的操作角色。（<strong>易混淆点：该处的角色权限是针对该测试计划的，与用户本身的角色无关！</strong>）</p>
<p>（4）选择好后，点击<strong>更新</strong>按钮，就可以保存结果。</p>
<p><strong><em>个人观点：******这个应该是TestLink最🐂🍺的功能了。可以让普通用户在不改变本身角色权限的情况下，就针对测试计划而言，获取到近似admin的权限。</em></strong></p>
<h6 id=""><a href="#" class="headerlink" title=""></a></h6><h3 id="测试用例管理"><a href="#测试用例管理" class="headerlink" title="测试用例管理"></a>测试用例管理</h3><hr>
<h6 id="1、测试用例概述"><a href="#1、测试用例概述" class="headerlink" title="1、测试用例概述"></a>1、测试用例概述</h6><p>（1）TestLink支持的测试用例的管理包含两层：分别为<strong>创建测试用例集（Test Suites）</strong>、<strong>创建测试用例（Test Cases）</strong>。可以把测试用例集对应到项目的<strong>功能模块</strong>，测试用例则对应着<strong>具体的功能</strong>。</p>
<p>（2）我们可以使用测试用例搜索功能从不同的项目、成百上千的测试用例中查到我们需要的测试用例，并且还提供移动和复制测试用例的功能，可以将一个测试用例移动或者复制到别的项目里，勾上自动更新树选项，添加、删除或编辑测试用例后更新树会被自动更新。</p>
<h6 id="2、创建测试用例"><a href="#2、创建测试用例" class="headerlink" title="2、创建测试用例"></a>2、创建测试用例</h6><p>（1）选择创建好的测试用例集，点击该页面右侧的“创建测试用例”按钮，新建测试用例。测试用例的要素包括：<strong>测试用例标题</strong>、<strong>摘要</strong>、<strong>步骤</strong>、<strong>期望结果</strong>、<strong>关键词</strong>。</p>
<p>（2）<strong>摘要</strong>：包括测试目的和前置条件</p>
<p>（3）<strong>建议</strong>：<strong>在编写测试用例的时候，要细分的每一个数据类型。在编写测试用例时，有些测试用例的步骤是相同的，可能变化的只是数据类型，我们可以采用复制的方法来实现。如果多个分类下面的测试用例相同，只是部分数据类型或者字段名称不同，可以通过移动测试用例的方法减少测试用例的工作量。同时，也可以在创建测试用例的摘要中，将不同的测试数据罗列，然后在测试步骤中，根据不同的测试数据，执行相同的操作。</strong></p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210119003428.png" alt="image-20210119003425194"  />

<h6 id="3、建立测试用例和测试需求的覆盖关系"><a href="#3、建立测试用例和测试需求的覆盖关系" class="headerlink" title="3、建立测试用例和测试需求的覆盖关系"></a>3、建立测试用例和测试需求的覆盖关系</h6><p>（1）单击主页“<strong>产品需求</strong>”模块下的“<strong>指派产品需求</strong>”菜单，进入需求指派页面，选中左侧用例树中的测试用例，再选择右侧对应的测试需求，进行指派即可。</p>
<p>（2）查看已经指派的测试用例；</p>
<p>（3）查看产品需求概览；</p>
<h3 id="测试用例集管理"><a href="#测试用例集管理" class="headerlink" title="测试用例集管理"></a>测试用例集管理</h3><hr>
<h6 id="1、添加测试用例到测试计划"><a href="#1、添加测试用例到测试计划" class="headerlink" title="1、添加测试用例到测试计划"></a>1、添加测试用例到测试计划</h6><p>（1）在主页通过测试计划下拉列表，先选择一个测试计划，点击<strong>“测试用例集”下的“添加/删除测试用例到测试计划”</strong>中按钮，进入向测试计划中添加测试用例。</p>
<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210119225550.png" alt="image-20210119225529027" style="zoom:60%;" align="center"/>

<p>（2）<strong>可以将已经创建好的测试用例指派给该测试计划</strong>。点击一个测试用例集，可以看到该测试用例下的所有测试用例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210119225315.png" alt="image-20210119225312836"></p>
<p>（3）你可以选择该测试计划中要执行的测试用例，也可以根据版本下拉列表来选择该测试计划下需要执行的测试用例版本。选择好后，点击“<strong>增加选择的测试用例</strong>”按钮，可以将选择好的测试用例分配给该测试计划。</p>
<h6 id="2、删除测试用例到测试计划"><a href="#2、删除测试用例到测试计划" class="headerlink" title="2、删除测试用例到测试计划"></a>2、删除测试用例到测试计划</h6><p>你可以选择该测试计划中要执行的测试用例，也可以根据版本下拉列表选择该测试计划下需要执行的测试用例版本。选择好后，点击“<strong>删除选择的测试用例</strong>”按钮，可以将<strong>选择好的测试用例移除该测试计划</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210119232952.png" alt="image-20210119232948819"></p>
<h6 id="3、显示最新的测试用例版本"><a href="#3、显示最新的测试用例版本" class="headerlink" title="3、显示最新的测试用例版本"></a>3、显示最新的测试用例版本</h6><p>点击主页“<strong>测试用例集</strong>”模块下的“显示测试用例的最新版本”菜单，进入连接到测试用例的最新版本显示页面，在这里可以看到<strong>连接到测试计划的最新的测试用例版本。</strong></p>
<h6 id="4、指派执行测试用例（给测试人员分配任务）"><a href="#4、指派执行测试用例（给测试人员分配任务）" class="headerlink" title="4、指派执行测试用例（给测试人员分配任务）"></a>4、指派执行测试用例（给测试人员分配任务）</h6><p>（1）点击主页<strong>“测试用例集”模块下的“指派执行测试用例”</strong>菜单，进入指派测试用例页面，可以为当前测试计划中所包含的每个用例指定一个具体的执行人员。</p>
<p>（2）在指派测试用例页面，左侧用例树中选择某个测试用例集或者测试用例，右侧页面会出现下拉列表让你选择用户。选择合适的用户后，在测试用例前面打钩，点击右侧页面下方的按钮即可完成用例的指派工作。</p>
<p>（3）当然，这里也可以进行批量指定 -&gt; 右侧页面的最上方，有一个下拉列表可以选择用户，下面的测试用例列表中选择要指派给用户的用例，然后点击一下后面的“执行”按钮 即可完成将多个用例指派给一个人的操作。具体步骤为：①选择左侧的测试计划、要指派的版本；②在页面右侧选择要指派给的测试人员</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210120001508.png" alt="image-20210120001505347"></p>
<h3 id="测试用例的执行和bug报告"><a href="#测试用例的执行和bug报告" class="headerlink" title="测试用例的执行和bug报告"></a>测试用例的执行和bug报告</h3><hr>
<h6 id="1、测试执行概述"><a href="#1、测试执行概述" class="headerlink" title="1、测试执行概述"></a>1、测试执行概述</h6><p>（1）在测试用例的编写告一段落之后，完成了具体的指派工作，就到了测试执行的阶段。</p>
<p>（2）执行测试用例的时候就会遇到三种情况：</p>
<p>​        ①测试用例通过；</p>
<p>​        ②测试用例未通过 -&gt; 报告bug；</p>
<p>​        ③测试用例不明确 -&gt; 锁定；</p>
<h6 id="2、执行测试"><a href="#2、执行测试" class="headerlink" title="2、执行测试"></a>2、执行测试</h6><p>（1）首页横向导航栏中的“执行测试”菜单，点击进入执行页面。该页面，同样一分为二，左侧是用例树，右侧页面内容为主题内容。</p>
<p>（2）<strong>这里有一点要说明一下，虽然“执行”表面上针对的是测试计划，而实际上对应的是测试计划中测试用例的执行情况。</strong></p>
<p>（3）左侧用例树中，可以根据具体的条件选择测试用例，选择某一个测试用例集后，右侧页面上方会出现测试计划，build描述，测试集的说明等等信息，在下面则是每个测试用例的详细情况，同时每一个测试用例的最后部分，有“说明/描述”输入框，可以在这里输入执行的一些说明性情况，还有“测试结果”，这两个输入都是需要我们执行完测试用例以后自己来填写的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210121095614.png" alt="image-20210121095610690"></p>
<h6 id="3、执行测试的四种结果"><a href="#3、执行测试的四种结果" class="headerlink" title="3、执行测试的四种结果"></a>3、执行测试的四种结果</h6><p>（1）通过（<strong>绿色底色</strong>）：该测试用例通过；</p>
<p>（2）失败（<strong>红色底色</strong>）：该测试用例没有执行成功，这个时候可以能就要向jira、mantis、bugzilla、Redmine等缺陷管理平台提交bug了；</p>
<p>（3）锁定（<strong>蓝色底色</strong>）：由于其他用例失败，导致此用例无法执行，被阻塞；</p>
<p>（4）尚未执行（<strong>灰色底色</strong>）：如果某个测试用例没有执行，则在最后的度量中标记为“尚未执行”；</p>
<p><strong><em>注：测试用例执行结果为不通过状态的，均需填写说明。该部分填写完成以后，在用例的开始部分会对这个结果有所记录。如果testlink和jira集成后，在这个记录后面会有一个小虫子标记，点击这个小虫子标记后，会出现一个记录bug号的输入框，如果测试用例是失败的，可以在这个地方输入该测试用例发现的bug在jira中的ID，然后会在记录下面出现一个ID的链接，点击ID后，可以直接链接到jira中该bug的页面。</em></strong></p>
<h6 id="4、报告bug"><a href="#4、报告bug" class="headerlink" title="4、报告bug"></a>4、报告bug</h6><p>（1）执行测试用例的过程中一旦发现bug，我们需要立即把其报告到bug管理系统中。TestLink提供了多种bug跟踪系统关联的接口配置，目前支持的bug系统有jira、bugzilla、mantis和Redmine等。</p>
<p>（2）如果TestLink与jira集成后，那么执行测试后，测试结果中会多出一项bug管理的项，它是一个小虫子的标记，点击那个小虫子标记后，会出现一个记录bug号的输入框。</p>
<p>（3）如果测试用例是失败的，可以在这个地方输入该测试用例发现的bug在jira中的ISSUE编号，然后会在该记录下面出现一个ISSUE编号的链接，点击即可直接跳转到jira该bug的页面。</p>
<h3 id="测试结果分析"><a href="#测试结果分析" class="headerlink" title="测试结果分析"></a>测试结果分析</h3><hr>
<h6 id="1、测试报告和进度概述"><a href="#1、测试报告和进度概述" class="headerlink" title="1、测试报告和进度概述"></a>1、测试报告和进度概述</h6><p>（1）TestLink根据测试过程中记录的数据，提供了较为丰富的度量统计功能，可以直观的得到测试管理过程中需要进行分析和总结的数据。点击首页横向导航栏中的“<strong>测试结果</strong>”菜单，即可进入测试结果报告页面。</p>
<p>（2）左侧一栏列出了可以选择的度量方式，所有度量是以构建为前提进行查询的，所有度量的报表格式分为<strong>三种类型</strong>。</p>
<p><strong>HTML：</strong>以HTML形式展现；</p>
<p><strong>MS Word：</strong>以Word形式展现；</p>
<p><strong>Email（HTML）</strong>：以email形式发送到用户邮箱；</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122123905.png" alt="image-20210122002034699"></p>
<h3 id="关键字和自定义字段管理"><a href="#关键字和自定义字段管理" class="headerlink" title="关键字和自定义字段管理"></a>关键字和自定义字段管理</h3><hr>
<h6 id="1、关键字管理"><a href="#1、关键字管理" class="headerlink" title="1、关键字管理"></a>1、关键字管理</h6><p>（1）关键字的创建</p>
<p>​        ①单击主页“<strong>产品管理”模块下的“关键字管理”</strong>菜单，创建一个新的关键字；</p>
<p>​        ②关键字的内容包括：<strong>名称</strong>和<strong>说明</strong>；</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122123917.png" alt="image-20210122003939164"></p>
<p>（2）关键字的指派</p>
<p>​        ①建立好关键字后，可以将关键字和测试用例相关联起来，一共有三种方式：指派到测试用例、指派关键字菜单、提前创建好，在创建测试用例时指派；</p>
<p>​        ②将有用的关键字列表中的关键字移动到分配关键字列表下，点击保存按钮，即可完成指派关键字操作。<img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122123930.png" alt="image-20210122004622508"></p>
<p>（3）使用关键字检索测试用例</p>
<p><strong>主页-测试用例模块-搜索测试用例</strong>，使用关键字去搜索。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122123941.png" alt="image-20210122004902530"></p>
<p>（4）关键字的删除维护</p>
<p><strong>进入主页-产品管理-关键字管理</strong>页面，点击某个关键字信息后面的删除按钮，可以将关键字删除。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122123950.png" alt="image-20210122005617746"></p>
<h6 id="2、自定义字段管理"><a href="#2、自定义字段管理" class="headerlink" title="2、自定义字段管理"></a>2、自定义字段管理</h6><p>（1）自定义字段的创建</p>
<p>​        ①点击<strong>主页系统下的自定义字段管理菜单</strong>，进入自定义字段管理页面，点击<strong>创建按钮</strong>，可以创建一个字段；</p>
<p>​        ②可以填写<strong>名称、标签、有效范围</strong>和<strong>类型</strong>，还有<strong>是否显示在测试执行中</strong>等。最后<strong>要选择该字段用在哪个地方（启用选项）</strong>，可以使用的地方有：<strong>测试用例设计、测试计划设计、测试执行</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122123958.png" alt="image-20210122011406285"></p>
<p>（2）自定义字段的指派</p>
<p>​        ①填写好一个自定义字段后，必须将该自定义字段进行指派才可以使用，如果计划得当，也可以在创建的时候完成指派。点击主页-产品管理-指派自定义字段菜单，进入<strong>自定义字段指派的页面</strong>。</p>
<p>​        ②勾选自定义字段前面的框，点击<strong>指派</strong>按钮，即可完成指派。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122124007.png" alt="image-20210122011914387"></p>
<p>（3）自定义字段的删除</p>
<p>点击主页-自定义字段管理，进入自定义字段管理页面，选择需要操作的自定义字段，进入之后点击下面的删除按钮，即可完成删除自定义字段的操作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/charseki1994/images/img/20210122124016.png" alt="image-20210122012144283"></p>
<h3 id="TestLink集成jira"><a href="#TestLink集成jira" class="headerlink" title="TestLink集成jira"></a>TestLink集成jira</h3><p><em>这里需要Jira-admin的配合，不做过多赘述。</em></p>
<p><em>感谢CCTV！感谢您的耐心阅读！</em></p>
]]></content>
      <categories>
        <category>Test Utils</category>
      </categories>
      <tags>
        <tag>TestLink</tag>
      </tags>
  </entry>
</search>
